<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sync Shinee]]></title>
  <link href="http://SyncShinee.github.io/atom.xml" rel="self"/>
  <link href="http://SyncShinee.github.io/"/>
  <updated>2014-07-15T23:46:24+08:00</updated>
  <id>http://SyncShinee.github.io/</id>
  <author>
    <name><![CDATA[Sync Shinee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BUPT新生暑假个人排位赛01 Solution]]></title>
    <link href="http://SyncShinee.github.io/blog/2014/07/15/bupt1solution/"/>
    <updated>2014-07-15T16:27:10+08:00</updated>
    <id>http://SyncShinee.github.io/blog/2014/07/15/bupt1solution</id>
    <content type="html"><![CDATA[<p>昨天下午，BUPT又举行了一场比赛。这场比赛难度要比上一次小不少。都是一些比较水的题目。下面就简单写一写我的思路吧。</p>

<!-- more -->


<h2><a href="http://code.bupt.edu.cn/problem/contest/104/problem/A/">A. 学姐的桌面</a></h2>

<p>大水题。。。排序+二分， 没啥好说的</p>

<p>附<a href="http://SyncShinee.github.io/pages/bupt1/bupt1asource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/104/problem/B/">B. 学姐去学车</a></h2>

<p>通过手工模拟，我们可以发现教练给学姐是以n+1为周期的。不过前m天不在这个周期内。所以前m天特判一下，后面先减去前面不在周期内的天数，再mod(n+1)就可以判断这一是由谁来教了。</p>

<p>附<a href="http://SyncShinee.github.io/pages/bupt1/bupt1bsource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/104/problem/C/">C. 学姐的学弟</a></h2>

<p>题目大意是给你n个圆，每个圆的圆心(xi,yi)都为整数点且半径为1，且1&lt;=xi，yi&lt;=100。求这些圆的面积并。</p>

<p>刚开始拿到这道题，感觉好复杂，果断跳过去做其他的。在把另外4题A掉之后才回来看，还是感觉好复杂……发现了一种O(n<sup>2</sup> log(n))的算法最终也没调出来。</p>

<p>赛后whn同学提醒:圆心都在整点且半径为1，且坐标范围在[0,101]*[0,101]!!我们可以发现对坐标网格中的每一个格子来说，它所贡献的面积仅与它四个顶点处有没有圆来决定，而且仅有四种情况，即0，满格，四分之一圆，以及两个四分之一圆相交。这样枚举网格就可以了。复杂度仅为O( n<sup>2</sup> )。</p>

<p>附<a href="http://SyncShinee.github.io/pages/bupt1/bupt1csource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/104/problem/D/">D. BLOCKS</a></h2>

<p>题目大意是给一个nxm的仅由‘.’、‘#’构成的矩阵，问矩阵中由‘#’组成的矩阵的个数。要求每个‘#’所在的联通块必须是一个矩阵，若不是则输出“So Sad”</p>

<p>一道简单的搜索题。或称之为洪水填充法(Flood Fill)。对这个矩阵扫一遍，发现有‘#’就进行bfs，同时判断它构成的是不是一个矩阵（粗心写错了好几发T ^ T）。</p>

<p>附<a href="http://SyncShinee.github.io/pages/bupt1/bupt1dsource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/104/problem/E/">E. 数的关系</a></h2>

<p>题目大意是告诉你有n个数，问这些数共有几种可能的序关系。</p>

<p>这个题比较有意思。有一种做法是直接从数学角度找，具体可以参考<a href="http://blog.csdn.net/fisher_jiang/article/details/2470369">这篇博文</a>。</p>

<p>我的做法是，将每个序关系等价描述为一种小球放箱子的方案。所有画等号的数放到一个箱子中，每有一个&#8217;&lt;&lsquo;号，就将它后面的数放在一个新的箱子中，不允许有空箱子。即箱子数为小于号的个数加一。</p>

<p>设f[i][j]表示把前i个数放入j个箱子的方案数。考虑第i个数放入时，
有两种情况。</p>

<ol>
<li>数i单独在一个箱子里，那么相当于先把前i-1个数放入j-1个箱子，然后将数i和它所在的箱子一起插进去，一共有f[i-1][j-1] * j种可能</li>
<li>数i所在的箱子中还有其它数，那么我们可以先将i-1个数放入j个箱子，然后把数i放入其中一个箱子，也就是说有f[i-1][j] * j种可能</li>
</ol>


<p>那么，我们就可以得到一个这样的额动态规划算法：</p>

<ul>
<li>初始化: f[i][1] = 1</li>
<li>状态转移方程: f[i][j] = (f[i-1][j-1] + f[i-1][j]) * j</li>
<li>目标函数: f[n][1] + f[n][2] + …… + f[n][n]</li>
</ul>


<p>时间复杂度为O( n<sup>2</sup> )。</p>

<p>注意使用高精度。</p>

<p>附<a href="http://SyncShinee.github.io/pages/bupt1/bupt1esource/">源代码</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BUPT新生归来赛 Solution]]></title>
    <link href="http://SyncShinee.github.io/blog/2014/07/14/bupt0solution/"/>
    <updated>2014-07-14T22:34:45+08:00</updated>
    <id>http://SyncShinee.github.io/blog/2014/07/14/bupt0solution</id>
    <content type="html"><![CDATA[<p>前几天打了BUPT的新生归来赛，感觉题目难度还可以吧，有几道题的确是需要费一些脑筋。下面我就来写一下这次比赛的解题报告。</p>

<!-- more -->


<h2><a href="http://code.bupt.edu.cn/problem/contest/101/problem/A/">A. Hard Game</a></h2>

<p>题目大意是给你n堆硬币，每堆有k个，每次只能从一堆硬币中取若干个，不能不取。谁最后没有石子可取就判为输。Alice先手取，Bob后手取，问对给定的n，k，谁会获胜。</p>

<p>很明显，在堆数为奇数时，Alice有必胜策略。我们可以给Alice这样的策略，第一次取k个，这样会剩下k-1堆。若Bob也取k个，则Alice再取k个；若Bob取a个(a &lt; k)则Alice在另外一堆里同样取a个。这样总会剩下偶数堆，并且这些堆中的硬币数两两相同。这样Alice必定会最后取完所有的硬币。</p>

<p>事实上，这个问题是Nim问题的简化版。Nim问题为，有n堆硬币，每堆有ki个，每次只能从一堆硬币中取若干个，不能不取。谁最后没有石子可取就判为输。这个问题可通过判断S=k1 ^ k2  …… ^ kn的值来判断是否先手必胜(不为0则先手必胜)。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>附证明：
</span><span class='line'>称一个先手必胜的局面为P局面，反之称之为N局面。
</span><span class='line'>1. 当k1=k2=……=kn=0时，满足中状态时P局面。
</span><span class='line'>2. 若S=0，若从堆i中取若干硬币使其剩下ki'个(ki' &lt; ki)，
</span><span class='line'>   则ki ^ ki' != 0。又S' ^ ki ^ ki' = S = 0，故S' = ki ^ ki' != 0。
</span><span class='line'>   满足P局面的所有子局面都是N局面。
</span><span class='line'>3. 若S != 0，设S的二进制位为A1A2……An，考虑第一位是1的。
</span><span class='line'>   在P中取出该位同是1的，不放设为P1。可知P1 ^ S &lt; P1，
</span><span class='line'>   令P1' = P1 ^ S，则P1' ^ P2 ^ …… ^ Pn=0。满足N局面存在至少一个P局面。
</span><span class='line'>证毕。</span></code></pre></td></tr></table></div></figure>


<p>而这道题其实就是所有的ki相等的情况，则在n为奇数时，S不为零。这也验证了我们的结论。</p>

<p>Nim问题还有很多扩展问题，这里就不再赘述了，有兴趣的可以自行google。</p>

<p>附<a href="http://SyncShinee.github.io/pages/bupt0/bupt0asource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/101/problem/B/">B. Prime Judge</a></h2>

<p>题目大意是给你一个复数判断它是不是复素数。复素数的定义为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>如果a+bi能被分解为(a1 + b1i) * (a2 + b2i)的形式，那么该数不是素数；否则，该数是素数。
</span><span class='line'>其中a1 、b1、 a2 、b2均为整数，且1，-1，0，i，-i不能作为被分解的因子。</span></code></pre></td></tr></table></div></figure>


<p>刚开始拿到这题确实没什么思路。因为a、b、a1、b1、a2、b2都有可能是负数，枚举也无从下手。后来，通过whn同学的提醒，我终于找到了解题思路。</p>

<p>我们可以发现如果a + bi=(a1 + b1i)<em>(a2 + b2i),则|a + bi| = |a1 + b1i| * |a2 + b2i|，即a<sup>2</sup> + b<sup>2</sup> = (a1<sup>2</sup> + b1<sup>2</sup>) * (a2<sup>2</sup> + b2<sup>2</sup>)。这样，就把原问题转化为一个正数的分解因数。而这我们可以在O(sqrt(n))的时间内解决。不过还有一个要求就是这两个因数都必须是两个数的平方和，判断这个问题可以通过枚举a1，然后a2 = 因数1 &ndash; a1<sup>2</sup> ;再判断sqrt(a2)<sup>2</sup> 是不是等于a2，如果相等，证明因数1是合法的对因数，对因数2可采取同样措施。这个复杂度为O(sqrt(sqrt(n)))。而n为a<sup>2</sup> + b<sup>2</sup> ，因此总的时间复杂度为O(a</em>sqrt(a))，可以接受。</p>

<p>whn同学还告诉我一种更加简洁的解法，具体可以参考<a href="http://blog.csdn.net/whn757397540/article/details/37742457">这篇博文</a></p>

<p>附<a href="http://SyncShinee.github.io/pages/bupt0/bupt0bsource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/101/problem/C/">C. Freeway</a></h2>

<p>题目大意是给你一个无根树，这个树的一些边是有向的，一些边是无向的。现在希望改变一些边的方向，使得我们可以从某一个点出发到达任意一点。改变边的方向的花费即为这条边的权值。现在请你找出花费最小的方案。</p>

<p>这道题出的很有迷惑性。刚拿到题目时，我以为从每一个点出发都有许多方案可以选择，而且还有可能从不同的点出发，感觉这题太难了。赛后才发现，原来这是一棵树。也就是说如果你确定了要从某一个点出发，那么这个图的所有边的方向已经都确定了。而且我们还可以发现，从某个点出发所需的花费与从与它相邻的点出发所需的花费之间的差别仅在这两点间的边上。</p>

<p>因此我们可以任选一个点来遍历整个树，求出他的花费，然后再遍历一次，更新所有点的花费。时间复杂度仅为O(n)。</p>

<p>附<a href="http://SyncShinee.github.io/pages/bupt0/bupt0csource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/101/problem/D/">D. Who Is Joyful</a></h2>

<p>题目大意是给你n个点，每个点都有一个高度值。接下来有q次询问。每次询问指定闭区间[l,r]，问在该区间内有多少点是joyful的。一个点是joyful的当且仅当它前面有比他小的点并且它后面有比他大的点，每次询问的区间外的点对区间内的点没有影响。</p>

<p>这道题由于每次询问的区间是变化的，而一个点是否是joyful的也随着区间的变化而变化，因此没有想出有效的算法。赛后通过阅读大神AC的代码，我才恍然大悟。</p>

<p>其实这道题等价于在区间中寻找三元组(a&lt; b &lt; c)的个数。而这样的三元组我们只用考虑长度最短的即对每个b找到它后面第一个比他大的和它前面第一个比他小的即可。但是这样还是没有简化问题。我们先把所有的询问按区间右端点排序，然后依次求解。我们把这个三元组的个数记录在a点，添加三元组的标记记录在c点，也就是说，对每一次询问，我们把所有c点位于上次的r到这次的r之间的三元组添加到树状数组的a点中，这样，我们就可以通过树状数组来实现log(n)的维护和查询。并且时间复杂度允许。</p>

<p>附<a href="http://SyncShinee.github.io/pages/bupt0/bupt0dsource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/101/problem/E/">E. 最小距离查询</a></h2>

<p>题目大意是初始时给你一个字符串，接下来有m次操作，操作共有两种，一种是在已有的字符串末尾添加一个字符，一种是询问对于位置x，在S当中和S[x]相等且距x最近的字符与x的距离</p>

<p>这道题也比较水，通过两个数组front[i][j]，behind[i][j]分别记录下来i点前后距离i点最近的j字母的位置。初始化可以通过递推完成，维护的时间复杂度也不高，询问就直接取front、behind中的最小值。</p>

<p>这道题whn同学还有另一种解法，具体可以参考<a href="http://blog.csdn.net/whn757397540/article/details/37729251">这篇博文</a>。</p>

<p>附<a href="http://SyncShinee.github.io/pages/bupt0/bupt0esource/">源代码</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HandyBUAA开发笔记（一）]]></title>
    <link href="http://SyncShinee.github.io/blog/2014/07/13/developnote1/"/>
    <updated>2014-07-13T15:17:57+08:00</updated>
    <id>http://SyncShinee.github.io/blog/2014/07/13/developnote1</id>
    <content type="html"><![CDATA[<p>这个暑假，原定的通过新版vpn爬课表的开发计划由于学校对移动版vpn的支持一直有问题而搁浅。于是<code>Ken Yu</code>学长让我定了一个新的开发计划：社团公告系统。他负责搞后台那部分，手机端的任务由我来制定，并和另外两名同学分配以下。最后，我分到的任务是完成社团公告系统的列表界面。通过这两天的努力，我这部分的任务基本完成了。下面就记录以下我这两天的成果吧～</p>

<!-- more -->


<h2>开发记录</h2>

<ol>
<li><strong>与SlidingMenu的交互。</strong>

<ul>
<li>我们的HandyBUAA引入了开源项目<a href="https://github.com/jfeinstein10/SlidingMenu">SlidingMenu</a>，因此要添加社团公告系统的列表就要SlidingMenu里面添加相应的模块并完成新activity与SlidingMenu的交互。</li>
<li>往SlidingMenu里添加新模块可以直接在xml文件里完成。通过阅读已有的代码，我明白了SlidingMenu与activity交互的机制。</li>
<li>首先为要添加的activity创建一个fragment，这个fragment继承于一个总的MainMenuFragment，在总的fragment里，我们对相应的SlidingMenu模块的点击事件作出判断并响应。在新建的fragment里也进行应有的响应。然后让这个activity实现这个fragment。这样，这个功能就实现了。</li>
</ul>
</li>
<li><strong>列表内容的获取与投放</strong>

<ul>
<li>要完成数据的创建、获取和投放，首先你要有这个数据类型……所以最先进行的就是定义数据类型，定义数据库组成等等，有点无聊。</li>
<li>投放的时候，首先，把数据从数据库中取出（如果有的话），通过sql语句来完成，将数据取出放在Cursor里，然后再把Cursor中的数据打包放入LinkedList中。之后通过一个ViewAdapter把LinkedList中的数据放到一个名为RefreshListView的由ListView派生的View里面，这个特殊的ListView是由学长们封装好的，它可以支持下拉刷新和加载更多功能。</li>
<li>最后添加数据刷新和点击打开相应公告的详细信息的功能。数据刷新通过一个AsyncTask类实现。点击打开详细信息的功能直接给ListView添加OnItemClickListener方法就可以了。</li>
</ul>
</li>
</ol>


<p>附截图（由于HandyBUAA不是开源项目，就不附源码了）
<img src="http://SyncShinee.github.io/images/14-07-13/HandyBUAA.png" alt="pic" />
<img src="http://SyncShinee.github.io/images/14-07-13/HandyBUAAsocietynotice.png" alt="pic1" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的Octopress博客]]></title>
    <link href="http://SyncShinee.github.io/blog/2014/06/15/wo-de-octopressbo-ke/"/>
    <updated>2014-06-15T18:35:12+08:00</updated>
    <id>http://SyncShinee.github.io/blog/2014/06/15/wo-de-octopressbo-ke</id>
    <content type="html"><![CDATA[<p>很早之前就想自己搭一个博客了，但由于各种原因总是没有成功。在学长的推荐下，我发现了一款强大的博客系统——Octopress。它是一款基于Jekyll的内容管理工具，可以方便的搭建站点和发布静态页面。号称是hacker专属的一个博客系统(A blogging framework for hackers)。亲自体验后，我发现它可以让你<strong>像写代码一样写博客</strong>。</p>

<!-- more -->


<p>好了，废话少说，我就记录下我在<em>fedora20</em>环境下搭建Octopress的过程吧。</p>

<h2>1. 安装Ruby</h2>

<p>Octopress需要Ruby环境，RVM(Ruby Version Manager)负责安装和管理Ruby的环境。所以我们先在终端输入如下命令，来安装RVM：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -L https://get.rvm.io | bash -s stable --ruby
</span></code></pre></td></tr></table></div></figure>


<p>然后根据提示运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">source</span> /etc/profile.d/rvm.sh
</span></code></pre></td></tr></table></div></figure>


<p>即可完成安装。这时运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby --version
</span></code></pre></td></tr></table></div></figure>


<p>发现显示</p>

<blockquote><p>ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux]`</p></blockquote>

<p>证明Ruby安装成功</p>

<ul>
<li>如果Ruby版本小于1.9.3，则需用RVM安装Ruby1.9.3</li>
</ul>


<h2>2. 安装Octopress</h2>

<p>Ruby安装完成后，我们可以开始安装Octopress了。
首先，把Octopress项目clone到本地并进入Octopress目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress
</span></code></pre></td></tr></table></div></figure>


<p>之后我们需要安装依赖</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install bundler
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>最后安装Octopress默认主题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake install
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>gem安装bundler的过程会比较慢，因为gem的默认安装源在国外。我们可以耐心等一等，如果想换源请自行google</li>
<li>如果使用<code>yum install ruby</code>命令安装ruby，在运行<code>gem install bundler</code>时会报错，这是由于yum安装Ruby并未将gem所需的所有依赖安装完整。因此请尽量使用RVM安装</li>
</ul>


<h2>3. 将博客部署到github</h2>

<p>首先，我们需要在github上创建一个个人blog的仓库（相关操作请自行google）
创建好仓库后我们可以利用octopress的一个配置rake任务来自动配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake  setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>上面的命令会做一些事情，其中最主要的就是创建一个_deploy目录，目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。
之后执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>这两行命令首先生成博客文件，并将生成的博客文件拷贝到_deploy/目录下，然后将这些内容添加到git中，并commit和push到仓库的master分支。至此，博客的部署基本完成，不过博客的source需要单独提交，执行如下命令就可以将source提交到仓库的source分支下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;Initial source commit&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后就是博客的配置工作了。Octopress有很多第三方主题，我使用的是一个极简风格的主题dotmin。博文支持现在很流行的markdown语法，这里推荐一款在线编辑markdown文件的编辑器<a href="http://dillinger.io">dillinger</a>
<img src="http://img.my.csdn.net/uploads/201302/27/1361970185_6834.png" alt="dillinger" />
它支持即时预览且预览速度较快，不过只能联网编辑，linux下的markdown编辑器我推荐<a href="http://pad.haroopress.com/user.html">haroopad</a>
<img src="http://pad.haroopress.com/assets/images/intro/2.png" alt="haroopad" /></p>

<p>它支持 Windows、Mac OS X 和 Linux。 主题样式丰富，语法标亮支持 54 种编程语言。其邮件导出功能可以将文档发送到 Tumblr 和 Evernote。这款产品由一位韩国人开发的，网站上的一部份帮助文档也是韩文。</p>

<h2>4. 接下来会写什么</h2>

<ul>
<li>ACM解题报告</li>
<li>学习记录</li>
<li>其他感兴趣的</li>
</ul>


<p>总之，一个博客搭好只是一个开始，重要的是一直坚持写下去。加油。</p>
]]></content>
  </entry>
  
</feed>
