<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ACM | Sync Shinee]]></title>
  <link href="http://SyncShinee.github.io/blog/categories/acm/atom.xml" rel="self"/>
  <link href="http://SyncShinee.github.io/"/>
  <updated>2014-07-15T23:47:57+08:00</updated>
  <id>http://SyncShinee.github.io/</id>
  <author>
    <name><![CDATA[Sync Shinee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BUPT新生暑假个人排位赛01 Solution]]></title>
    <link href="http://SyncShinee.github.io/blog/2014/07/15/bupt1solution/"/>
    <updated>2014-07-15T16:27:10+08:00</updated>
    <id>http://SyncShinee.github.io/blog/2014/07/15/bupt1solution</id>
    <content type="html"><![CDATA[<p>昨天下午，BUPT又举行了一场比赛。这场比赛难度要比上一次小不少。都是一些比较水的题目。下面就简单写一写我的思路吧。</p>

<!-- more -->


<h2><a href="http://code.bupt.edu.cn/problem/contest/104/problem/A/">A. 学姐的桌面</a></h2>

<p>大水题。。。排序+二分， 没啥好说的</p>

<p>附<a href="/pages/bupt1/bupt1asource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/104/problem/B/">B. 学姐去学车</a></h2>

<p>通过手工模拟，我们可以发现教练给学姐是以n+1为周期的。不过前m天不在这个周期内。所以前m天特判一下，后面先减去前面不在周期内的天数，再mod(n+1)就可以判断这一是由谁来教了。</p>

<p>附<a href="/pages/bupt1/bupt1bsource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/104/problem/C/">C. 学姐的学弟</a></h2>

<p>题目大意是给你n个圆，每个圆的圆心(xi,yi)都为整数点且半径为1，且1&lt;=xi，yi&lt;=100。求这些圆的面积并。</p>

<p>刚开始拿到这道题，感觉好复杂，果断跳过去做其他的。在把另外4题A掉之后才回来看，还是感觉好复杂……发现了一种O(n<sup>2</sup> log(n))的算法最终也没调出来。</p>

<p>赛后whn同学提醒:圆心都在整点且半径为1，且坐标范围在[0,101]*[0,101]!!我们可以发现对坐标网格中的每一个格子来说，它所贡献的面积仅与它四个顶点处有没有圆来决定，而且仅有四种情况，即0，满格，四分之一圆，以及两个四分之一圆相交。这样枚举网格就可以了。复杂度仅为O( n<sup>2</sup> )。</p>

<p>附<a href="/pages/bupt1/bupt1csource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/104/problem/D/">D. BLOCKS</a></h2>

<p>题目大意是给一个nxm的仅由‘.’、‘#’构成的矩阵，问矩阵中由‘#’组成的矩阵的个数。要求每个‘#’所在的联通块必须是一个矩阵，若不是则输出“So Sad”</p>

<p>一道简单的搜索题。或称之为洪水填充法(Flood Fill)。对这个矩阵扫一遍，发现有‘#’就进行bfs，同时判断它构成的是不是一个矩阵（粗心写错了好几发T ^ T）。</p>

<p>附<a href="/pages/bupt1/bupt1dsource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/104/problem/E/">E. 数的关系</a></h2>

<p>题目大意是告诉你有n个数，问这些数共有几种可能的序关系。</p>

<p>这个题比较有意思。有一种做法是直接从数学角度找，具体可以参考<a href="http://blog.csdn.net/fisher_jiang/article/details/2470369">这篇博文</a>。</p>

<p>我的做法是，将每个序关系等价描述为一种小球放箱子的方案。所有画等号的数放到一个箱子中，每有一个'&lt;&lsquo;号，就将它后面的数放在一个新的箱子中，不允许有空箱子。即箱子数为小于号的个数加一。</p>

<p>设f[i][j]表示把前i个数放入j个箱子的方案数。考虑第i个数放入时，
有两种情况。</p>

<ol>
<li>数i单独在一个箱子里，那么相当于先把前i-1个数放入j-1个箱子，然后将数i和它所在的箱子一起插进去，一共有f[i-1][j-1] * j种可能</li>
<li>数i所在的箱子中还有其它数，那么我们可以先将i-1个数放入j个箱子，然后把数i放入其中一个箱子，也就是说有f[i-1][j] * j种可能</li>
</ol>


<p>那么，我们就可以得到一个这样的额动态规划算法：</p>

<ul>
<li>初始化: f[i][1] = 1</li>
<li>状态转移方程: f[i][j] = (f[i-1][j-1] + f[i-1][j]) * j</li>
<li>目标函数: f[n][1] + f[n][2] + …… + f[n][n]</li>
</ul>


<p>时间复杂度为O( n<sup>2</sup> )。</p>

<p>注意使用高精度。</p>

<p>附<a href="/pages/bupt1/bupt1esource/">源代码</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BUPT新生归来赛 Solution]]></title>
    <link href="http://SyncShinee.github.io/blog/2014/07/14/bupt0solution/"/>
    <updated>2014-07-14T22:34:45+08:00</updated>
    <id>http://SyncShinee.github.io/blog/2014/07/14/bupt0solution</id>
    <content type="html"><![CDATA[<p>前几天打了BUPT的新生归来赛，感觉题目难度还可以吧，有几道题的确是需要费一些脑筋。下面我就来写一下这次比赛的解题报告。</p>

<!-- more -->


<h2><a href="http://code.bupt.edu.cn/problem/contest/101/problem/A/">A. Hard Game</a></h2>

<p>题目大意是给你n堆硬币，每堆有k个，每次只能从一堆硬币中取若干个，不能不取。谁最后没有石子可取就判为输。Alice先手取，Bob后手取，问对给定的n，k，谁会获胜。</p>

<p>很明显，在堆数为奇数时，Alice有必胜策略。我们可以给Alice这样的策略，第一次取k个，这样会剩下k-1堆。若Bob也取k个，则Alice再取k个；若Bob取a个(a &lt; k)则Alice在另外一堆里同样取a个。这样总会剩下偶数堆，并且这些堆中的硬币数两两相同。这样Alice必定会最后取完所有的硬币。</p>

<p>事实上，这个问题是Nim问题的简化版。Nim问题为，有n堆硬币，每堆有ki个，每次只能从一堆硬币中取若干个，不能不取。谁最后没有石子可取就判为输。这个问题可通过判断S=k1 ^ k2  …… ^ kn的值来判断是否先手必胜(不为0则先手必胜)。</p>

<p><code>
附证明：
称一个先手必胜的局面为P局面，反之称之为N局面。
1. 当k1=k2=……=kn=0时，满足中状态时P局面。
2. 若S=0，若从堆i中取若干硬币使其剩下ki'个(ki' &lt; ki)，
   则ki ^ ki' != 0。又S' ^ ki ^ ki' = S = 0，故S' = ki ^ ki' != 0。
   满足P局面的所有子局面都是N局面。
3. 若S != 0，设S的二进制位为A1A2……An，考虑第一位是1的。
   在P中取出该位同是1的，不放设为P1。可知P1 ^ S &lt; P1，
   令P1' = P1 ^ S，则P1' ^ P2 ^ …… ^ Pn=0。满足N局面存在至少一个P局面。
证毕。
</code>
而这道题其实就是所有的ki相等的情况，则在n为奇数时，S不为零。这也验证了我们的结论。</p>

<p>Nim问题还有很多扩展问题，这里就不再赘述了，有兴趣的可以自行google。</p>

<p>附<a href="/pages/bupt0/bupt0asource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/101/problem/B/">B. Prime Judge</a></h2>

<p>题目大意是给你一个复数判断它是不是复素数。复素数的定义为
<code>
如果a+bi能被分解为(a1 + b1i) * (a2 + b2i)的形式，那么该数不是素数；否则，该数是素数。
其中a1 、b1、 a2 、b2均为整数，且1，-1，0，i，-i不能作为被分解的因子。
</code>
刚开始拿到这题确实没什么思路。因为a、b、a1、b1、a2、b2都有可能是负数，枚举也无从下手。后来，通过whn同学的提醒，我终于找到了解题思路。</p>

<p>我们可以发现如果a + bi=(a1 + b1i)<em>(a2 + b2i),则|a + bi| = |a1 + b1i| * |a2 + b2i|，即a<sup>2</sup> + b<sup>2</sup> = (a1<sup>2</sup> + b1<sup>2</sup>) * (a2<sup>2</sup> + b2<sup>2</sup>)。这样，就把原问题转化为一个正数的分解因数。而这我们可以在O(sqrt(n))的时间内解决。不过还有一个要求就是这两个因数都必须是两个数的平方和，判断这个问题可以通过枚举a1，然后a2 = 因数1 &ndash; a1<sup>2</sup> ;再判断sqrt(a2)<sup>2</sup> 是不是等于a2，如果相等，证明因数1是合法的对因数，对因数2可采取同样措施。这个复杂度为O(sqrt(sqrt(n)))。而n为a<sup>2</sup> + b<sup>2</sup> ，因此总的时间复杂度为O(a</em>sqrt(a))，可以接受。</p>

<p>whn同学还告诉我一种更加简洁的解法，具体可以参考<a href="http://blog.csdn.net/whn757397540/article/details/37742457">这篇博文</a></p>

<p>附<a href="/pages/bupt0/bupt0bsource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/101/problem/C/">C. Freeway</a></h2>

<p>题目大意是给你一个无根树，这个树的一些边是有向的，一些边是无向的。现在希望改变一些边的方向，使得我们可以从某一个点出发到达任意一点。改变边的方向的花费即为这条边的权值。现在请你找出花费最小的方案。</p>

<p>这道题出的很有迷惑性。刚拿到题目时，我以为从每一个点出发都有许多方案可以选择，而且还有可能从不同的点出发，感觉这题太难了。赛后才发现，原来这是一棵树。也就是说如果你确定了要从某一个点出发，那么这个图的所有边的方向已经都确定了。而且我们还可以发现，从某个点出发所需的花费与从与它相邻的点出发所需的花费之间的差别仅在这两点间的边上。</p>

<p>因此我们可以任选一个点来遍历整个树，求出他的花费，然后再遍历一次，更新所有点的花费。时间复杂度仅为O(n)。</p>

<p>附<a href="/pages/bupt0/bupt0csource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/101/problem/D/">D. Who Is Joyful</a></h2>

<p>题目大意是给你n个点，每个点都有一个高度值。接下来有q次询问。每次询问指定闭区间[l,r]，问在该区间内有多少点是joyful的。一个点是joyful的当且仅当它前面有比他小的点并且它后面有比他大的点，每次询问的区间外的点对区间内的点没有影响。</p>

<p>这道题由于每次询问的区间是变化的，而一个点是否是joyful的也随着区间的变化而变化，因此没有想出有效的算法。赛后通过阅读大神AC的代码，我才恍然大悟。</p>

<p>其实这道题等价于在区间中寻找三元组(a&lt; b &lt; c)的个数。而这样的三元组我们只用考虑长度最短的即对每个b找到它后面第一个比他大的和它前面第一个比他小的即可。但是这样还是没有简化问题。我们先把所有的询问按区间右端点排序，然后依次求解。我们把这个三元组的个数记录在a点，添加三元组的标记记录在c点，也就是说，对每一次询问，我们把所有c点位于上次的r到这次的r之间的三元组添加到树状数组的a点中，这样，我们就可以通过树状数组来实现log(n)的维护和查询。并且时间复杂度允许。</p>

<p>附<a href="/pages/bupt0/bupt0dsource/">源代码</a></p>

<h2><a href="http://code.bupt.edu.cn/problem/contest/101/problem/E/">E. 最小距离查询</a></h2>

<p>题目大意是初始时给你一个字符串，接下来有m次操作，操作共有两种，一种是在已有的字符串末尾添加一个字符，一种是询问对于位置x，在S当中和S[x]相等且距x最近的字符与x的距离</p>

<p>这道题也比较水，通过两个数组front[i][j]，behind[i][j]分别记录下来i点前后距离i点最近的j字母的位置。初始化可以通过递推完成，维护的时间复杂度也不高，询问就直接取front、behind中的最小值。</p>

<p>这道题whn同学还有另一种解法，具体可以参考<a href="http://blog.csdn.net/whn757397540/article/details/37729251">这篇博文</a>。</p>

<p>附<a href="/pages/bupt0/bupt0esource/">源代码</a></p>
]]></content>
  </entry>
  
</feed>
